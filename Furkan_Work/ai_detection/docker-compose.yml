version: '3.8'

services:
  fastapi_backend:
    container_name: backend
    build: 
      context: ./backend
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    volumes:
      - ./data:/app/data
      - ./Logs/Backend_Logs:/app/Backend_Logs
    depends_on:
      kafka:
        condition: service_healthy
      redis:
        condition: service_healthy
      init:
        condition: service_completed_successfully
    env_file:
      - .env
    restart: unless-stopped
  cloudflared:
    image: cloudflare/cloudflared:latest
    container_name: cloudflared
    depends_on:
      - fastapi_backend
    command: tunnel --url http://fastapi_backend:8000
    restart: unless-stopped
    
  frame_splitter:
    build:
      context: ./frame_splitter
      dockerfile: Dockerfile
    volumes:
      - ./data:/app/data
      - ./Logs/FS_Logs:/app/FS_Logs
    environment:
      - KAFKA_BOOTSTRAP=kafka:9092
    depends_on:
      kafka:
        condition: service_healthy
      redis:
        condition: service_healthy
      init:
        condition: service_completed_successfully
    env_file:
      - .env
    restart: on-failure
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 2G

  ai_unit:
    image: ai-unit-gpu
    build:
      context: ./ai_unit
      dockerfile: Dockerfile
      args:
        - NVIDIA_DRIVER_VERSION=470
    runtime: nvidia
    restart: unless-stopped
    volumes:
      - ./Logs/AI_Logs:/app/AI_Logs
      - ./ai_unit/models:/app/models
    environment:
      - KAFKA_BOOTSTRAP=kafka:9092
      - REDIS_HOST=redis
      - WORKER_ID=${HOSTNAME}
      - KAFKA_GROUP_ID=ai-unit-group
    env_file:
      - .env
    depends_on:
      kafka:
        condition: service_healthy
      redis:
        condition: service_healthy
      init:
        condition: service_completed_successfully
    deploy:
      replicas: 3
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
        limits:
          memory: 8192M
    healthcheck:
      test: ["CMD", "python", "-c", "import torch; assert torch.cuda.is_available()"]
      interval: 30s
      timeout: 10s
      retries: 3
  beh_unit:
    image: beh-unit-gpu
    build:
      context: ./beh_unit
      dockerfile: Dockerfile
      args:
        - NVIDIA_DRIVER_VERSION=470
    runtime: nvidia
    restart: unless-stopped
    volumes:
      - ./Logs/Beh_Logs:/app/Beh_Logs
      - ./data:/app/data
    environment:
      - KAFKA_BOOTSTRAP=kafka:9092
      - DB_PATH=/app/data/videos.db
      - WORKER_ID=${HOSTNAME}
    env_file:
      - .env
    depends_on:
      kafka:
        condition: service_healthy
      init:
        condition: service_completed_successfully
    deploy:
      replicas: 1
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
        limits:
          cpus: '2'
          memory: 4G
    healthcheck:
      test: ["CMD", "python", "-c", "import torch; assert torch.cuda.is_available()"]
      interval: 30s
      timeout: 10s
      retries: 3

  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    command: redis-server --save 60 1 --loglevel warning
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G

  zookeeper:
    image: confluentinc/cp-zookeeper:7.2.1
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    healthcheck:
      test: ["CMD", "zkOk.sh"]
      interval: 10s
      timeout: 5s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G

  kafka:
    image: confluentinc/cp-kafka:7.2.1
    ports:
      - "9092:9092"
      - "9999:9999" # JMX port
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_JMX_PORT: 9999
      KAFKA_JMX_HOSTNAME: localhost
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
    volumes:
      - kafka_data:/var/lib/kafka/data
    healthcheck:
      test: |
        bash -c '\
        kafka-topics --bootstrap-server localhost:9092 --list && \
        echo "Kafka is ready" || exit 1\
        '
      interval: 10s
      timeout: 20s
      retries: 10
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 2G
  init:
    build:
      context: ./init
      dockerfile: Dockerfile
    depends_on:
      kafka:
        condition: service_healthy
    volumes:
      - ./data:/app/data
    environment:
      - KAFKA_BOOTSTRAP=kafka:9092
    restart: "no"

  decision_unit:
      build:
        context: ./decision_unit
        dockerfile: Dockerfile
      volumes:
        - ./data:/app/data
        - ./Logs/DU_Logs:/app/DU_Logs
        - ./data/segment_videos:/app/data/segment_videos
      environment:
        - PYTHONPATH=/app
        - KAFKA_BOOTSTRAP=kafka:9092
        - REDIS_HOST=redis
        - REDIS_PORT=6379
        - REDIS_DB=0
      depends_on:
        kafka:
          condition: service_healthy
        redis:
          condition: service_healthy
        init:
          condition: service_completed_successfully
      restart: unless-stopped
volumes:
  redis_data:
    driver: local
  kafka_data:
    driver: local
